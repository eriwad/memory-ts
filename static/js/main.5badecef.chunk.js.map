{"version":3,"sources":["Components/card.tsx","Components/gameBoard.tsx","Components/button.tsx","App.tsx","index.tsx"],"names":["CardStatus","GameState","Card","props","cardStyles","border","status","Paired","opacity","src","Selected","imageSrc","className","style","onClick","OnImageClick","index","pairId","Button","buttonProps","onButtonClick","disabled","isDisabled","buttonText","createPairs","numberOfPairs","array","i","length","j","Math","floor","random","k","shuffleCards","Array","from","keys","GameBoard","boardSettings","useState","selections","setSelections","flippedIndexes","setFlippedIndexes","pairs","setPairs","buttons","setButtons","attempts","setAttempts","remainingTime","setRemainingTime","Playing","gameState","setGameState","wrapperStyles","Lost","Won","useEffect","timer","setTimeout","clearTimeout","clickedImage","includes","newSelection","concat","every","x","newPairs","getStatus","Hidden","map","item","valueOf","String","App","pair","setPair","type","onChange","e","val","target","value","Number","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIAQKA,E,uEAAAA,O,mBAAAA,I,uBAAAA,I,oBAAAA,M,KAOL,ICPMC,EDOAC,EAA2B,SAACC,GAE7B,IAAMC,EAAa,CACdC,OAAQF,EAAMG,SAAWN,EAAWO,OAAS,kBAAoB,wBACjEC,QAAUL,EAAMG,SAAWN,EAAWO,OAAS,MAAQ,OAU5D,OACK,qBAAKE,IANFN,EAAMG,SAAWN,EAAWO,QAAUJ,EAAMG,SAAWN,EAAWU,SAAlE,kBACKP,EAAMQ,SADX,QAEP,mBAIwBC,UAAW,OAAQC,MAAOT,EAAYU,QAAS,kBAAMX,EAAMY,aAAaZ,EAAMa,MAAMb,EAAMc,OAAOd,EAAMG,YEhBtHY,EARwB,SAACC,GAGpC,OACI,wBAAQL,QAASK,EAAYC,cAAeC,SAAUF,EAAYG,WAAlE,SAA+EH,EAAYI,e,SDF7FtB,O,qBAAAA,I,aAAAA,I,gBAAAA,M,KAMN,IAWMuB,EAAe,SAACC,GAGlB,OAdiB,SAACC,GAElB,IAAK,IAAIC,EAAID,EAAME,OAAQ,EAAGD,EAAI,EAAGA,IAAK,CACtC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAIP,EAAMC,GAChBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEjB,OAAOP,EAMEQ,CADUC,MAAMC,KAAKD,MAAsB,EAAhBV,GAAmBY,UAqI1CC,EAjIqB,SAACC,GAEjC,IADJ,EAEuCC,mBAAS,IAFhD,mBAEWC,EAFX,KAEsBC,EAFtB,OAG+CF,mBAAS,IAHxD,mBAGWG,EAHX,KAG0BC,EAH1B,OAI6BJ,mBAAS,IAJtC,mBAIWK,EAJX,KAIiBC,EAJjB,OAKiCN,mBAAShB,EAAYe,EAAcM,QALpE,mBAKWE,EALX,KAKmBC,EALnB,OAMmCR,mBAAS,GAN5C,mBAMWS,EANX,KAMoBC,EANpB,OAO6CV,mBANlB,EAM2BD,EAAcM,OAPpE,mBAOWM,EAPX,KAOyBC,EAPzB,OAQoCZ,mBAASvC,EAAUoD,SARvD,mBAQWC,EARX,KAQqBC,EARrB,KASUC,EAAgB,CAClBnD,OAAOiD,IAAcrD,EAAUwD,KAAO,gBAAkBH,IAAcrD,EAAUyD,IAAM,kBAAoB,QAE9GC,qBAAU,WACN,GAAGL,IAAcrD,EAAUyD,IAA3B,CAIA,GAAGP,GAAiB,EAIhB,OAFAI,EAAatD,EAAUwD,WACvBb,EAAkBG,GAItB,IAAMa,EAAMC,YAAW,WAEnBT,EADyBD,EAAgB,KAEtC,KAEP,OAAO,kBAAMW,aAAaF,OAC1B,CAACT,IAEL,IAAMY,EAAe,SAACpC,EAASV,EAAgBX,GAC3C,GAAGA,GAAUN,EAAWO,SAAUoC,EAAeqB,SAASrC,GAA1D,CAIAiB,EAAkB,GAAD,mBAAKD,GAAL,CAAsBhB,KAEvC,IAAMsC,EAAexB,EAAWyB,OAAOjD,GAEvC,GAA0B,GAAvBgD,EAAarC,OAChB,CACI,GAAGqC,EAAaE,OAAM,SAAAC,GAAC,OAAEA,GAAKnD,KAC9B,CACI,IAAMoD,EAAWxB,EAAMqB,OAAOjD,GAC9B6B,EAASuB,GAENA,EAASzC,QAAUW,EAAcM,OAChCU,EAAatD,EAAUyD,KAG/BR,EAAYD,EAAW,GACvBP,EAAc,IACdmB,YAAW,kBAAIjB,EAAkB,MAAI,UAIrCF,EAAcuB,KAqBhBK,EAAY,SAAC3C,EAASV,GAEvB,OAAG4B,EAAMmB,SAAS/C,GAEPjB,EAAWO,OAEfoC,EAAeqB,SAASrC,GAErB3B,EAAWU,SAIXV,EAAWuE,QAK1B,OACI,qCACI,sBAAK3D,UAAU,OAAf,UACI,cAAC,EAAD,CAAQW,WAAW,iBAAiBH,cArCrB,WACvB4B,EAAWxB,EAAYe,EAAcM,QACrCH,EAAc,IACdE,EAAkB,IAClBE,EAAS,IACTM,EAlEmB,EAkEFb,EAAcM,OAC/BK,EAAY,GACZK,EAAatD,EAAUoD,YA+Bf,cAAC,EAAD,CAAQ9B,WAAW,gBAAgBH,cA5B5B,WACfwB,EAAkBG,GAClBc,YAAW,kBAAIjB,EAAkB,MAAI,OA0BgCtB,WAAYgC,IAAcrD,EAAUoD,UACjG,wDAA0B,iCAASJ,OACnC,2CAAa,iCAASE,OACtB,2CAAa,iCAASlD,EAAUqD,WAEpC,qBAAK1C,UAAU,YAAYC,MAAO2C,EAAlC,SACA,qBAAK5C,UAAU,cAAf,SAEImC,EAAQyB,KACJ,SAACC,EAAKzD,GAEF,IAAMC,EAASwD,EAAQlC,EAAcM,MAAM6B,UAC3C,OAEI,cAAC,EAAD,CACA3D,aAAcgD,EACK/C,MAAOA,EAC1BC,OAAQA,EACRX,OAAQgE,EAAUtD,EAAMC,GACxBN,SAAUgE,OAAQ1D,EAAS,IAHtB0D,OAAOF,eE9HzBG,EApBM,WAAO,IAAD,EACFpC,mBAAS,GADP,mBAClBqC,EADkB,KACbC,EADa,KAEvB,OACE,sBAAKlE,UAAU,UAAf,UACE,kDACA,sBAAKA,UAAU,WAAf,UAA0B,gEAA0C,uBAAOmE,KAAK,OAChFC,SACE,SAACC,GACC,IAAMC,EAAMD,EAAEE,OAAOC,MAClBC,OAAOH,GAAO,GAEfJ,EAAQO,OAAOH,KAGrBI,YAAY,oBACZ,cAAC,EAAD,CAAWzC,MAAOgC,QCZ1BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5badecef.chunk.js","sourcesContent":["interface CardProps{\r\n     imageSrc : string,\r\n     index : number,\r\n     pairId : number,\r\n     status : CardStatus,\r\n     OnImageClick : (index:number,pairId:number,status:CardStatus) => void,\r\n }\r\n\r\nenum CardStatus {\r\n     Paired,\r\n     Selected,\r\n     Hidden\r\n }\r\n \r\n\r\nconst Card:React.FC<CardProps> = (props:CardProps) => {\r\n\r\n     const cardStyles = {\r\n          border: props.status === CardStatus.Paired ? '2px solid black' : '2px solid transparent',\r\n          opacity : props.status === CardStatus.Paired ? '0.5' : '1.0'         \r\n          };\r\n\r\n     const getSrc  = () : string => {\r\n\r\n     return (props.status === CardStatus.Paired || props.status === CardStatus.Selected \r\n     ? `/images/${props.imageSrc}.png`\r\n     :'/images/back.png');\r\n\r\n     }        \r\n     return(\r\n          <img src={getSrc()} className={\"card\"} style={cardStyles} onClick={() => props.OnImageClick(props.index,props.pairId,props.status)} />\r\n     )\r\n}\r\nexport {Card,CardStatus};\r\n\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport {Card,CardStatus} from \"./card\";\r\nimport Button from \"./button\";\r\n\r\ninterface Board{\r\n    pairs : number,\r\n}\r\n\r\n enum GameState{\r\n    Playing,\r\n    Won,\r\n    Lost\r\n}\r\n\r\nconst shuffleCards = (array : number[]) : number[] =>  {\r\n        \r\n    for (let i = array.length -1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const k = array[i];\r\n        array[i] = array[j];\r\n        array[j] = k\r\n  }\r\n  return array;\r\n}\r\n\r\nconst createPairs  = (numberOfPairs:number) : number[] => \r\n{\r\n    const newArray = Array.from(Array(numberOfPairs * 2).keys());\r\n    return shuffleCards(newArray);\r\n}\r\n\r\nconst GameBoard : React.FC<Board> = (boardSettings) => \r\n{\r\n    const secondsPerPair = 5;\r\n    const [selections,setSelections] = useState([] as number[]);\r\n    const [flippedIndexes,setFlippedIndexes] = useState([] as number[]);\r\n    const [pairs,setPairs] = useState([] as number[]);\r\n    const [buttons,setButtons] = useState(createPairs(boardSettings.pairs));\r\n    const [attempts,setAttempts] = useState(0);\r\n    const [remainingTime,setRemainingTime] = useState(boardSettings.pairs * secondsPerPair);\r\n    const [gameState,setGameState] =useState(GameState.Playing);\r\n    const wrapperStyles = {\r\n        border:gameState === GameState.Lost ? '2px solid red' : gameState === GameState.Won ? '2px solid green' : 'none'\r\n    };\r\n    useEffect(() => {\r\n        if(gameState === GameState.Won)\r\n        {\r\n            return;\r\n        }\r\n        if(remainingTime <= 0)\r\n        {\r\n            setGameState(GameState.Lost);\r\n            setFlippedIndexes(buttons);\r\n            return;\r\n        }\r\n        \r\n        const timer=setTimeout(() => {\r\n            const remainingSeconds = remainingTime - 1;\r\n            setRemainingTime(remainingSeconds);\r\n            }, 1000);\r\n       \r\n        return () => clearTimeout(timer);\r\n      },[remainingTime]);\r\n\r\n    const clickedImage = (i:number,pairId : number,status:CardStatus) => {\r\n        if(status == CardStatus.Paired || flippedIndexes.includes(i))\r\n        {   \r\n            return;\r\n        }\r\n        setFlippedIndexes([...flippedIndexes , i]);\r\n\r\n        const newSelection = selections.concat(pairId);\r\n        \r\n        if(newSelection.length == 2)\r\n        {\r\n            if(newSelection.every(x=>x == pairId))\r\n            {\r\n                const newPairs = pairs.concat(pairId);\r\n                setPairs(newPairs);\r\n\r\n                if(newPairs.length == boardSettings.pairs){\r\n                    setGameState(GameState.Won);\r\n                }\r\n            }\r\n            setAttempts(attempts + 1);\r\n            setSelections([]);\r\n            setTimeout(()=>setFlippedIndexes([]),200);\r\n        }\r\n        else\r\n        {\r\n            setSelections(newSelection);\r\n        }\r\n    }\r\n       \r\n    const newGameButtonClick = () => {\r\n        setButtons(createPairs(boardSettings.pairs));\r\n        setSelections([]);\r\n        setFlippedIndexes([]);\r\n        setPairs([]);\r\n        setRemainingTime(boardSettings.pairs * secondsPerPair);\r\n        setAttempts(0);\r\n        setGameState(GameState.Playing);\r\n    }\r\n\r\n    const showBoard =  ()=> {\r\n        setFlippedIndexes(buttons);\r\n        setTimeout(()=>setFlippedIndexes([]),1500);\r\n\r\n    }\r\n\r\n\r\n    const getStatus = (i:number,pairId:number) =>\r\n     {\r\n         if(pairs.includes(pairId))\r\n         {\r\n             return CardStatus.Paired;\r\n         }\r\n        else if(flippedIndexes.includes(i))\r\n        {\r\n            return CardStatus.Selected;\r\n        }\r\n        else\r\n        {\r\n            return CardStatus.Hidden;    \r\n        }\r\n    }\r\n  \r\n\r\n    return (\r\n        <>\r\n            <div className=\"menu\">\r\n                <Button buttonText=\"Start new game\" onButtonClick={newGameButtonClick} />\r\n                <Button buttonText=\"Peek solution\" onButtonClick={showBoard} isDisabled={gameState !== GameState.Playing} />\r\n                <span>Number of Attempts: <strong>{attempts}</strong></span>\r\n                <span>Timer: <strong>{remainingTime}</strong></span>\r\n                <span>State: <strong>{GameState[gameState]}</strong></span>\r\n            </div>\r\n            <div className=\"gameBoard\" style={wrapperStyles}>\r\n            <div className=\"cardWrapper\">\r\n            {\r\n                buttons.map(\r\n                    (item,index) =>\r\n                    { \r\n                        const pairId = item  % boardSettings.pairs.valueOf();\r\n                        return(\r\n                            \r\n                            <Card\r\n                            OnImageClick={clickedImage} \r\n                            key={String(item)} index={index}\r\n                            pairId={pairId}\r\n                            status={getStatus(index,pairId)}\r\n                            imageSrc={String((pairId + 1))} /> \r\n                            );\r\n                    })\r\n            }\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default GameBoard;","export interface ButtonProps{\r\n    buttonText : string,\r\n    isDisabled? : boolean,\r\n    onButtonClick : () => void\r\n}\r\n\r\nconst Button : React.FC<ButtonProps> = (buttonProps) =>\r\n{\r\n\r\n    return (\r\n        <button onClick={buttonProps.onButtonClick} disabled={buttonProps.isDisabled}>{buttonProps.buttonText}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import { useState } from 'react';\nimport GameBoard from './Components/gameBoard';\nconst App:React.FC = () => {\n  const [pair,setPair] = useState(6);\n    return (\n      <div className=\"wrapper\">\n        <h2>Play memory game</h2>\n        <div className=\"inputBox\"><label>How many pairs do you want?</label><input type=\"text\" \n        onChange={\n          (e)=>{\n            const val = e.target.value;\n            if(Number(val) > 0)\n            {\n              setPair(Number(val))\n            }\n        }}\n        placeholder=\"Default is 6\" /></div>\n        <GameBoard pairs={pair} />\n      </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}